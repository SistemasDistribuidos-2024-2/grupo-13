// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: datanode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataNodeService_StoreDigimon_FullMethodName        = "/datanode.DataNodeService/StoreDigimon"
	DataNodeService_GetDigimonAttribute_FullMethodName = "/datanode.DataNodeService/GetDigimonAttribute"
	DataNodeService_Terminate_FullMethodName           = "/datanode.DataNodeService/Terminate"
)

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	// El Data Node recibe información del Primary Node y almacena los datos localmente.
	StoreDigimon(ctx context.Context, in *DigimonInfo, opts ...grpc.CallOption) (*StoreDigimonResponse, error)
	// El Data Node responde a las solicitudes del Primary Node devolviendo el atributo correspondiente.
	GetDigimonAttribute(ctx context.Context, in *DigimonRequest, opts ...grpc.CallOption) (*DigimonResponse, error)
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) StoreDigimon(ctx context.Context, in *DigimonInfo, opts ...grpc.CallOption) (*StoreDigimonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreDigimonResponse)
	err := c.cc.Invoke(ctx, DataNodeService_StoreDigimon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) GetDigimonAttribute(ctx context.Context, in *DigimonRequest, opts ...grpc.CallOption) (*DigimonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DigimonResponse)
	err := c.cc.Invoke(ctx, DataNodeService_GetDigimonAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, DataNodeService_Terminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility.
type DataNodeServiceServer interface {
	// El Data Node recibe información del Primary Node y almacena los datos localmente.
	StoreDigimon(context.Context, *DigimonInfo) (*StoreDigimonResponse, error)
	// El Data Node responde a las solicitudes del Primary Node devolviendo el atributo correspondiente.
	GetDigimonAttribute(context.Context, *DigimonRequest) (*DigimonResponse, error)
	Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataNodeServiceServer struct{}

func (UnimplementedDataNodeServiceServer) StoreDigimon(context.Context, *DigimonInfo) (*StoreDigimonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreDigimon not implemented")
}
func (UnimplementedDataNodeServiceServer) GetDigimonAttribute(context.Context, *DigimonRequest) (*DigimonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDigimonAttribute not implemented")
}
func (UnimplementedDataNodeServiceServer) Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}
func (UnimplementedDataNodeServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_StoreDigimon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigimonInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).StoreDigimon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_StoreDigimon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).StoreDigimon(ctx, req.(*DigimonInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_GetDigimonAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigimonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).GetDigimonAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_GetDigimonAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).GetDigimonAttribute(ctx, req.(*DigimonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataNodeService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreDigimon",
			Handler:    _DataNodeService_StoreDigimon_Handler,
		},
		{
			MethodName: "GetDigimonAttribute",
			Handler:    _DataNodeService_GetDigimonAttribute_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _DataNodeService_Terminate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datanode.proto",
}
