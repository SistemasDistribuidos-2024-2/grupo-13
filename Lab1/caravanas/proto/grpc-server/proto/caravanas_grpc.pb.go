// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: caravanas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaravanService_AssignPackage_FullMethodName      = "/caravans.CaravanService/AssignPackage"
	CaravanService_ReportStatus_FullMethodName       = "/caravans.CaravanService/ReportStatus"
	CaravanService_CheckCaravanStatus_FullMethodName = "/caravans.CaravanService/CheckCaravanStatus"
)

// CaravanServiceClient is the client API for CaravanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaravanServiceClient interface {
	AssignPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error)
	ReportStatus(ctx context.Context, in *StatusRequestCaravana, opts ...grpc.CallOption) (*StatusResponseCaravana, error)
	CheckCaravanStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CaravanStatusResponse, error)
}

type caravanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaravanServiceClient(cc grpc.ClientConnInterface) CaravanServiceClient {
	return &caravanServiceClient{cc}
}

func (c *caravanServiceClient) AssignPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageResponse)
	err := c.cc.Invoke(ctx, CaravanService_AssignPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caravanServiceClient) ReportStatus(ctx context.Context, in *StatusRequestCaravana, opts ...grpc.CallOption) (*StatusResponseCaravana, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponseCaravana)
	err := c.cc.Invoke(ctx, CaravanService_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caravanServiceClient) CheckCaravanStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CaravanStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaravanStatusResponse)
	err := c.cc.Invoke(ctx, CaravanService_CheckCaravanStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaravanServiceServer is the server API for CaravanService service.
// All implementations must embed UnimplementedCaravanServiceServer
// for forward compatibility.
type CaravanServiceServer interface {
	AssignPackage(context.Context, *PackageRequest) (*PackageResponse, error)
	ReportStatus(context.Context, *StatusRequestCaravana) (*StatusResponseCaravana, error)
	CheckCaravanStatus(context.Context, *EmptyRequest) (*CaravanStatusResponse, error)
	mustEmbedUnimplementedCaravanServiceServer()
}

// UnimplementedCaravanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaravanServiceServer struct{}

func (UnimplementedCaravanServiceServer) AssignPackage(context.Context, *PackageRequest) (*PackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPackage not implemented")
}
func (UnimplementedCaravanServiceServer) ReportStatus(context.Context, *StatusRequestCaravana) (*StatusResponseCaravana, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedCaravanServiceServer) CheckCaravanStatus(context.Context, *EmptyRequest) (*CaravanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCaravanStatus not implemented")
}
func (UnimplementedCaravanServiceServer) mustEmbedUnimplementedCaravanServiceServer() {}
func (UnimplementedCaravanServiceServer) testEmbeddedByValue()                        {}

// UnsafeCaravanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaravanServiceServer will
// result in compilation errors.
type UnsafeCaravanServiceServer interface {
	mustEmbedUnimplementedCaravanServiceServer()
}

func RegisterCaravanServiceServer(s grpc.ServiceRegistrar, srv CaravanServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaravanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaravanService_ServiceDesc, srv)
}

func _CaravanService_AssignPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).AssignPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_AssignPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).AssignPackage(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaravanService_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequestCaravana)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).ReportStatus(ctx, req.(*StatusRequestCaravana))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaravanService_CheckCaravanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).CheckCaravanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_CheckCaravanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).CheckCaravanStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaravanService_ServiceDesc is the grpc.ServiceDesc for CaravanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaravanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caravans.CaravanService",
	HandlerType: (*CaravanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPackage",
			Handler:    _CaravanService_AssignPackage_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _CaravanService_ReportStatus_Handler,
		},
		{
			MethodName: "CheckCaravanStatus",
			Handler:    _CaravanService_CheckCaravanStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caravanas.proto",
}
