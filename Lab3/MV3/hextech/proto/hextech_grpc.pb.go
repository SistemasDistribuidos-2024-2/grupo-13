// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hextech.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HextechService_AddProductServer_FullMethodName    = "/hextech.HextechService/AddProductServer"
	HextechService_DeleteProductServer_FullMethodName = "/hextech.HextechService/DeleteProductServer"
	HextechService_UpdateProductServer_FullMethodName = "/hextech.HextechService/UpdateProductServer"
	HextechService_RenameProductServer_FullMethodName = "/hextech.HextechService/RenameProductServer"
	HextechService_GetProductServer_FullMethodName    = "/hextech.HextechService/GetProductServer"
	HextechService_ForceMerge_FullMethodName          = "/hextech.HextechService/ForceMerge"
	HextechService_PropagateChanges_FullMethodName    = "/hextech.HextechService/PropagateChanges"
	HextechService_RequestMerge_FullMethodName        = "/hextech.HextechService/RequestMerge"
)

// HextechServiceClient is the client API for HextechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HextechServiceClient interface {
	// Comandos enviados por supervisores
	AddProductServer(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	DeleteProductServer(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	UpdateProductServer(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	RenameProductServer(ctx context.Context, in *RenameProductRequest, opts ...grpc.CallOption) (*ClockResponse, error)
	GetProductServer(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// Comandos enviados por broker, supervisores y jayce
	ForceMerge(ctx context.Context, in *ErrorMergeRequest, opts ...grpc.CallOption) (*ConfirmationError, error)
	// Comandos enviados por servidores
	PropagateChanges(ctx context.Context, in *PropagationRequest, opts ...grpc.CallOption) (*PropagationResponse, error)
	RequestMerge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
}

type hextechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHextechServiceClient(cc grpc.ClientConnInterface) HextechServiceClient {
	return &hextechServiceClient{cc}
}

func (c *hextechServiceClient) AddProductServer(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, HextechService_AddProductServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) DeleteProductServer(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, HextechService_DeleteProductServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) UpdateProductServer(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, HextechService_UpdateProductServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) RenameProductServer(ctx context.Context, in *RenameProductRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, HextechService_RenameProductServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) GetProductServer(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, HextechService_GetProductServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) ForceMerge(ctx context.Context, in *ErrorMergeRequest, opts ...grpc.CallOption) (*ConfirmationError, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmationError)
	err := c.cc.Invoke(ctx, HextechService_ForceMerge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) PropagateChanges(ctx context.Context, in *PropagationRequest, opts ...grpc.CallOption) (*PropagationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PropagationResponse)
	err := c.cc.Invoke(ctx, HextechService_PropagateChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) RequestMerge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, HextechService_RequestMerge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HextechServiceServer is the server API for HextechService service.
// All implementations must embed UnimplementedHextechServiceServer
// for forward compatibility.
type HextechServiceServer interface {
	// Comandos enviados por supervisores
	AddProductServer(context.Context, *AddProductRequest) (*ClockResponse, error)
	DeleteProductServer(context.Context, *DeleteProductRequest) (*ClockResponse, error)
	UpdateProductServer(context.Context, *UpdateProductRequest) (*ClockResponse, error)
	RenameProductServer(context.Context, *RenameProductRequest) (*ClockResponse, error)
	GetProductServer(context.Context, *GetProductRequest) (*ProductResponse, error)
	// Comandos enviados por broker, supervisores y jayce
	ForceMerge(context.Context, *ErrorMergeRequest) (*ConfirmationError, error)
	// Comandos enviados por servidores
	PropagateChanges(context.Context, *PropagationRequest) (*PropagationResponse, error)
	RequestMerge(context.Context, *MergeRequest) (*MergeResponse, error)
	mustEmbedUnimplementedHextechServiceServer()
}

// UnimplementedHextechServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHextechServiceServer struct{}

func (UnimplementedHextechServiceServer) AddProductServer(context.Context, *AddProductRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductServer not implemented")
}
func (UnimplementedHextechServiceServer) DeleteProductServer(context.Context, *DeleteProductRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductServer not implemented")
}
func (UnimplementedHextechServiceServer) UpdateProductServer(context.Context, *UpdateProductRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductServer not implemented")
}
func (UnimplementedHextechServiceServer) RenameProductServer(context.Context, *RenameProductRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameProductServer not implemented")
}
func (UnimplementedHextechServiceServer) GetProductServer(context.Context, *GetProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductServer not implemented")
}
func (UnimplementedHextechServiceServer) ForceMerge(context.Context, *ErrorMergeRequest) (*ConfirmationError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceMerge not implemented")
}
func (UnimplementedHextechServiceServer) PropagateChanges(context.Context, *PropagationRequest) (*PropagationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateChanges not implemented")
}
func (UnimplementedHextechServiceServer) RequestMerge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMerge not implemented")
}
func (UnimplementedHextechServiceServer) mustEmbedUnimplementedHextechServiceServer() {}
func (UnimplementedHextechServiceServer) testEmbeddedByValue()                        {}

// UnsafeHextechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HextechServiceServer will
// result in compilation errors.
type UnsafeHextechServiceServer interface {
	mustEmbedUnimplementedHextechServiceServer()
}

func RegisterHextechServiceServer(s grpc.ServiceRegistrar, srv HextechServiceServer) {
	// If the following call pancis, it indicates UnimplementedHextechServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HextechService_ServiceDesc, srv)
}

func _HextechService_AddProductServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).AddProductServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_AddProductServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).AddProductServer(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_DeleteProductServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).DeleteProductServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_DeleteProductServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).DeleteProductServer(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_UpdateProductServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).UpdateProductServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_UpdateProductServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).UpdateProductServer(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_RenameProductServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).RenameProductServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_RenameProductServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).RenameProductServer(ctx, req.(*RenameProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_GetProductServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).GetProductServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_GetProductServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).GetProductServer(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_ForceMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).ForceMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_ForceMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).ForceMerge(ctx, req.(*ErrorMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_PropagateChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).PropagateChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_PropagateChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).PropagateChanges(ctx, req.(*PropagationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_RequestMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).RequestMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HextechService_RequestMerge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).RequestMerge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HextechService_ServiceDesc is the grpc.ServiceDesc for HextechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HextechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hextech.HextechService",
	HandlerType: (*HextechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductServer",
			Handler:    _HextechService_AddProductServer_Handler,
		},
		{
			MethodName: "DeleteProductServer",
			Handler:    _HextechService_DeleteProductServer_Handler,
		},
		{
			MethodName: "UpdateProductServer",
			Handler:    _HextechService_UpdateProductServer_Handler,
		},
		{
			MethodName: "RenameProductServer",
			Handler:    _HextechService_RenameProductServer_Handler,
		},
		{
			MethodName: "GetProductServer",
			Handler:    _HextechService_GetProductServer_Handler,
		},
		{
			MethodName: "ForceMerge",
			Handler:    _HextechService_ForceMerge_Handler,
		},
		{
			MethodName: "PropagateChanges",
			Handler:    _HextechService_PropagateChanges_Handler,
		},
		{
			MethodName: "RequestMerge",
			Handler:    _HextechService_RequestMerge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hextech.proto",
}
